import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, onSnapshot, addDoc, updateDoc, deleteDoc, doc, query, orderBy } from 'firebase/firestore';

// Define Firebase configuration and app ID.
// These are provided globally in the Canvas environment.
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Helper function for exponential backoff retry logic for API calls
const retryOperation = async (operation, maxRetries = 5, delay = 1000) => {
    for (let i = 0; i < maxRetries; i++) {
        try {
            return await operation();
        } catch (error) {
            if (i < maxRetries - 1) {
                await new Promise(res => setTimeout(res, delay * Math.pow(2, i)));
            } else {
                throw error;
            }
        }
    }
};

const App = () => {
    // State to hold the list of subjects
    const [subjects, setSubjects] = useState([]);
    // State for new subject input fields
    const [newSubjectName, setNewSubjectName] = useState('');
    const [newTotalClasses, setNewTotalClasses] = useState('');
    const [newAttendedClasses, setNewAttendedClasses] = useState('');
    // State for Firebase instances and user ID
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    // State for loading indicator
    const [loading, setLoading] = useState(true);
    // State for error messages
    const [error, setError] = useState(null);
    // State for editing a subject
    const [editingSubjectId, setEditingSubjectId] = useState(null);

    // Initialize Firebase and set up authentication listener
    useEffect(() => {
        const initializeFirebase = async () => {
            try {
                const app = initializeApp(firebaseConfig);
                const firestoreDb = getFirestore(app);
                const firebaseAuth = getAuth(app);

                setDb(firestoreDb);
                setAuth(firebaseAuth);

                // Sign in with custom token or anonymously
                await retryOperation(async () => {
                    if (initialAuthToken) {
                        await signInWithCustomToken(firebaseAuth, initialAuthToken);
                    } else {
                        await signInAnonymously(firebaseAuth);
                    }
                });

                // Listen for authentication state changes
                const unsubscribeAuth = onAuthStateChanged(firebaseAuth, (user) => {
                    if (user) {
                        setUserId(user.uid);
                    } else {
                        // If for some reason the user logs out or token expires, sign in anonymously again
                        signInAnonymously(firebaseAuth).then(userCredential => {
                            setUserId(userCredential.user.uid);
                        }).catch(err => {
                            console.error("Failed to sign in anonymously:", err);
                            setError("Failed to authenticate. Please try again.");
                            setLoading(false);
                        });
                    }
                });

                return () => unsubscribeAuth(); // Cleanup auth listener
            } catch (err) {
                console.error("Firebase initialization error:", err);
                setError("Failed to initialize the application. Please check your network connection.");
                setLoading(false);
            }
        };

        initializeFirebase();
    }, []);

    // Fetch data from Firestore when db and userId are available
    useEffect(() => {
        if (db && userId) {
            setLoading(true);
            setError(null);
            // Construct the path for private user data
            const userSubjectsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/subjects`);
            
            // Listen for real-time updates to the subjects collection
            const unsubscribeSnapshot = onSnapshot(userSubjectsCollectionRef, (snapshot) => {
                try {
                    const subjectsData = snapshot.docs.map(doc => ({
                        id: doc.id,
                        ...doc.data()
                    }));
                    setSubjects(subjectsData.map(calculateAttendanceDetails));
                    setLoading(false);
                } catch (err) {
                    console.error("Error fetching subjects:", err);
                    setError("Failed to load your attendance data.");
                    setLoading(false);
                }
            }, (err) => {
                console.error("Firestore onSnapshot error:", err);
                setError("Real-time data updates failed. Please refresh the page.");
                setLoading(false);
            });

            return () => unsubscribeSnapshot(); // Cleanup snapshot listener
        }
    }, [db, userId]); // Dependencies: db and userId

    // Function to calculate attendance percentage and classes to miss/attend
    const calculateAttendanceDetails = (subject) => {
        const total = parseInt(subject.totalClasses);
        const attended = parseInt(subject.attendedClasses);

        if (isNaN(total) || isNaN(attended) || total <= 0) {
            return {
                ...subject,
                attendancePercentage: 0,
                canMiss: 'N/A',
                needsToAttend: 'N/A'
            };
        }

        const percentage = (attended / total) * 100;
        let canMiss = 0;
        let needsToAttend = 0;

        if (percentage >= 75) {
            // Calculate how many classes can be missed
            // (attended / (total + x)) * 100 >= 75
            // attended * 100 >= 75 * (total + x)
            // (attended * 100 / 75) - total >= x
            canMiss = Math.floor((attended * 100 / 75) - total);
            if (canMiss < 0) canMiss = 0; // Cannot miss negative classes
        } else {
            // Calculate how many more classes need to be attended to reach 75%
            // (attended + x) / (total + x) * 100 >= 75
            // 100 * (attended + x) >= 75 * (total + x)
            // 100 * attended + 100 * x >= 75 * total + 75 * x
            // 25 * x >= 75 * total - 100 * attended
            // x >= (75 * total - 100 * attended) / 25
            needsToAttend = Math.ceil((75 * total - 100 * attended) / 25);
            if (needsToAttend < 0) needsToAttend = 0; // Should not happen if percentage < 75
        }

        return {
            ...subject,
            attendancePercentage: parseFloat(percentage.toFixed(2)),
            canMiss: percentage >= 75 ? canMiss : 'N/A',
            needsToAttend: percentage < 75 ? needsToAttend : 'N/A'
        };
    };

    // Handle adding or updating a subject
    const handleAddOrUpdateSubject = async (e) => {
        e.preventDefault();
        setError(null);

        if (!newSubjectName || isNaN(newTotalClasses) || isNaN(newAttendedClasses) || newTotalClasses <= 0) {
            setError("Please enter valid subject name, total classes (must be greater than 0), and attended classes.");
            return;
        }

        setLoading(true);
        try {
            const subjectData = {
                name: newSubjectName,
                totalClasses: parseInt(newTotalClasses),
                attendedClasses: parseInt(newAttendedClasses),
            };

            const userSubjectsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/subjects`);

            if (editingSubjectId) {
                // Update existing subject
                const subjectDocRef = doc(db, `artifacts/${appId}/users/${userId}/subjects`, editingSubjectId);
                await retryOperation(() => updateDoc(subjectDocRef, subjectData));
                setEditingSubjectId(null);
            } else {
                // Add new subject
                await retryOperation(() => addDoc(userSubjectsCollectionRef, subjectData));
            }

            // Clear form fields
            setNewSubjectName('');
            setNewTotalClasses('');
            setNewAttendedClasses('');
        } catch (err) {
            console.error("Error adding/updating subject:", err);
            setError("Failed to save subject. Please try again.");
        } finally {
            setLoading(false);
        }
    };

    // Handle deleting a subject
    const handleDeleteSubject = async (id) => {
        setError(null);
        setLoading(true);
        try {
            const subjectDocRef = doc(db, `artifacts/${appId}/users/${userId}/subjects`, id);
            await retryOperation(() => deleteDoc(subjectDocRef));
        } catch (err) {
            console.error("Error deleting subject:", err);
            setError("Failed to delete subject. Please try again.");
        } finally {
            setLoading(false);
        }
    };

    // Handle editing a subject (pre-populate form)
    const handleEditSubject = (subject) => {
        setEditingSubjectId(subject.id);
        setNewSubjectName(subject.name);
        setNewTotalClasses(subject.totalClasses);
        setNewAttendedClasses(subject.attendedClasses);
    };

    if (loading && !userId) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
                <p className="text-lg font-semibold">Loading application, please wait...</p>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-4 sm:p-6 lg:p-8 flex flex-col items-center">
            {/* Tailwind CSS CDN for styling */}
            <script src="https://cdn.tailwindcss.com"></script>
            {/* Font Inter */}
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />

            {/* Custom Tailwind CSS configuration for Inter font */}
            <style>
                {`
                body {
                    font-family: 'Inter', sans-serif;
                }
                `}
            </style>

            <div className="max-w-4xl w-full bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700">
                <h1 className="text-3xl sm:text-4xl font-extrabold text-center text-indigo-700 dark:text-indigo-400 mb-6">
                    Attendance Tracker 📚
                </h1>

                {userId && (
                    <p className="text-sm text-center text-gray-600 dark:text-gray-400 mb-4">
                        Your User ID: <span className="font-mono bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded text-xs">{userId}</span>
                    </p>
                )}

                {error && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-4 flex items-center" role="alert">
                        <svg className="fill-current h-6 w-6 text-red-500 mr-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                            <path d="M10 18a8 8 0 1 1 0-16 8 8 0 0 1 0 16zm-1-9V7h2v2h-2zm0 4v-2h2v2h-2z"/>
                        </svg>
                        <p className="font-semibold">{error}</p>
                    </div>
                )}

                {loading && (
                    <div className="flex items-center justify-center mb-4">
                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500"></div>
                        <p className="ml-3 text-indigo-600 dark:text-indigo-300">Loading data...</p>
                    </div>
                )}

                <form onSubmit={handleAddOrUpdateSubject} className="mb-8 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg shadow-inner">
                    <h2 className="text-2xl font-semibold text-center text-gray-800 dark:text-gray-200 mb-4">
                        {editingSubjectId ? 'Edit Subject' : 'Add New Subject'}
                    </h2>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div>
                            <label htmlFor="subjectName" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Subject Name</label>
                            <input
                                type="text"
                                id="subjectName"
                                value={newSubjectName}
                                onChange={(e) => setNewSubjectName(e.target.value)}
                                placeholder="e.g., Data Structures"
                                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-600 text-gray-900 dark:text-gray-100"
                                required
                            />
                        </div>
                        <div>
                            <label htmlFor="totalClasses" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Total Classes</label>
                            <input
                                type="number"
                                id="totalClasses"
                                value={newTotalClasses}
                                onChange={(e) => setNewTotalClasses(e.target.value)}
                                placeholder="e.g., 50"
                                min="1"
                                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-600 text-gray-900 dark:text-gray-100"
                                required
                            />
                        </div>
                        <div>
                            <label htmlFor="attendedClasses" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Classes Attended</label>
                            <input
                                type="number"
                                id="attendedClasses"
                                value={newAttendedClasses}
                                onChange={(e) => setNewAttendedClasses(e.target.value)}
                                placeholder="e.g., 40"
                                min="0"
                                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 bg-white dark:bg-gray-600 text-gray-900 dark:text-gray-100"
                                required
                            />
                        </div>
                    </div>
                    <button
                        type="submit"
                        className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                        disabled={loading}
                    >
                        {editingSubjectId ? 'Update Subject' : 'Add Subject'}
                    </button>
                    {editingSubjectId && (
                        <button
                            type="button"
                            onClick={() => {
                                setEditingSubjectId(null);
                                setNewSubjectName('');
                                setNewTotalClasses('');
                                setNewAttendedClasses('');
                            }}
                            className="w-full mt-2 bg-gray-400 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                        >
                            Cancel Edit
                        </button>
                    )}
                </form>

                {subjects.length === 0 ? (
                    <p className="text-center text-gray-500 dark:text-gray-400 text-lg">No subjects added yet. Add a subject to get started! 🚀</p>
                ) : (
                    <div className="overflow-x-auto">
                        <table className="min-w-full bg-white dark:bg-gray-800 rounded-lg shadow-md divide-y divide-gray-200 dark:divide-gray-700">
                            <thead className="bg-gray-100 dark:bg-gray-700">
                                <tr>
                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider rounded-tl-lg">Subject</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Total</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Attended</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Attendance %</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Can Miss</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Needs to Attend</th>
                                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider rounded-tr-lg">Actions</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                                {subjects.map((subject) => (
                                    <tr key={subject.id} className={subject.attendancePercentage < 75 ? 'bg-red-50 dark:bg-red-900/20' : 'hover:bg-gray-50 dark:hover:bg-gray-700/50'}>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">{subject.name}</td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{subject.totalClasses}</td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{subject.attendedClasses}</td>
                                        <td className={`px-4 py-3 whitespace-nowrap text-sm font-semibold ${subject.attendancePercentage < 75 ? 'text-red-600 dark:text-red-400' : 'text-green-600 dark:text-green-400'}`}>
                                            {subject.attendancePercentage}%
                                            {subject.attendancePercentage < 75 && (
                                                <span className="ml-2 text-xs bg-red-200 text-red-800 dark:bg-red-800 dark:text-red-200 px-2 py-1 rounded-full font-bold">
                                                    WARNING!
                                                </span>
                                            )}
                                        </td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{subject.canMiss}</td>
                                        <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{subject.needsToAttend}</td>
                                        <td className="px-4 py-3 whitespace-nowrap text-right text-sm font-medium">
                                            <button
                                                onClick={() => handleEditSubject(subject)}
                                                className="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300 mr-3 transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                                                title="Edit Subject"
                                            >
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor">
                                                    <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                                                    <path fillRule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clipRule="evenodd" />
                                                </svg>
                                                <span className="sr-only">Edit</span>
                                            </button>
                                            <button
                                                onClick={() => handleDeleteSubject(subject.id)}
                                                className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300 transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                                                title="Delete Subject"
                                            >
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 inline-block" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm6 0a1 1 0 012 0v6a1 1 0 11-2 0V8z" clipRule="evenodd" />
                                                </svg>
                                                <span className="sr-only">Delete</span>
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                )}
            </div>
        </div>
    );
};

export default App;
